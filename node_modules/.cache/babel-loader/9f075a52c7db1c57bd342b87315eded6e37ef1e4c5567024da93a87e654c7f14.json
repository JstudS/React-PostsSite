{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport PostService from \"../API/PostService\";\nimport { getPageCount } from \"../utils/pages\";\nexport const useFetching = callback => {\n  _s();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [totalPages, setTotalPages] = useState(0);\n  const [limit, setLimit] = useState(10);\n  const [page, setPage] = useState(1);\n  const fetching = async () => {\n    try {\n      setIsLoading(true);\n      const response = await PostService.getAll(limit, page);\n      setPosts(response.data);\n      const totalCount = response.headers['x-total-count'];\n      setTotalPages(getPageCount(totalCount, limit));\n    } catch (e) {\n      setError(e.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return [fetching, isLoading, error];\n};\n_s(useFetching, \"GQ7KGUXArPzBEsiPPU5xpaodjvQ=\");","map":{"version":3,"names":["useState","PostService","getPageCount","useFetching","callback","_s","isLoading","setIsLoading","error","setError","totalPages","setTotalPages","limit","setLimit","page","setPage","fetching","response","getAll","setPosts","data","totalCount","headers","e","message"],"sources":["C:/JavaScript Projects/React/react-new-start/src/hooks/useFetching.js"],"sourcesContent":["import { useState } from \"react\"\r\nimport PostService from \"../API/PostService\"\r\nimport { getPageCount } from \"../utils/pages\"\r\n\r\nexport const useFetching = (callback) => {\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const [error, setError] = useState('')\r\n    const [totalPages, setTotalPages] = useState(0)\r\n    const [limit, setLimit] = useState(10)\r\n    const [page, setPage] = useState(1)\r\n\r\n    const fetching = async() => {\r\n        try{\r\n            setIsLoading(true)\r\n            const response = await PostService.getAll(limit, page)\r\n            setPosts(response.data)\r\n            const totalCount = response.headers['x-total-count']\r\n            setTotalPages(getPageCount(totalCount, limit)) \r\n        } catch (e) {\r\n            setError(e.message)\r\n        } finally {\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    return [fetching, isLoading, error]\r\n}"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,WAAW,MAAM,oBAAoB;AAC5C,SAASC,YAAY,QAAQ,gBAAgB;AAE7C,OAAO,MAAMC,WAAW,GAAIC,QAAQ,IAAK;EAAAC,EAAA;EACrC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACU,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACc,IAAI,EAAEC,OAAO,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC;EAEnC,MAAMgB,QAAQ,GAAG,MAAAA,CAAA,KAAW;IACxB,IAAG;MACCT,YAAY,CAAC,IAAI,CAAC;MAClB,MAAMU,QAAQ,GAAG,MAAMhB,WAAW,CAACiB,MAAM,CAACN,KAAK,EAAEE,IAAI,CAAC;MACtDK,QAAQ,CAACF,QAAQ,CAACG,IAAI,CAAC;MACvB,MAAMC,UAAU,GAAGJ,QAAQ,CAACK,OAAO,CAAC,eAAe,CAAC;MACpDX,aAAa,CAACT,YAAY,CAACmB,UAAU,EAAET,KAAK,CAAC,CAAC;IAClD,CAAC,CAAC,OAAOW,CAAC,EAAE;MACRd,QAAQ,CAACc,CAAC,CAACC,OAAO,CAAC;IACvB,CAAC,SAAS;MACNjB,YAAY,CAAC,KAAK,CAAC;IACvB;EACJ,CAAC;EAED,OAAO,CAACS,QAAQ,EAAEV,SAAS,EAAEE,KAAK,CAAC;AACvC,CAAC;AAAAH,EAAA,CAtBYF,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}